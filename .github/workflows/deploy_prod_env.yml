name: Deploy Production Env

on:
  workflow_run:
    workflows: ["Deploy Testing Env"]
    types:
      - completed

# declaring global env variables
env:
  USERNAME: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}

  IMAGE_NAME_DB: ${{ secrets.IMAGE_NAME_DB }}
  IMAGE_NAME_APP: ${{ secrets.IMAGE_NAME_APP }}
  TAG: ${{ secrets.TAG }}

  HOST: ${{ secrets.EC2_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy_production:
    runs-on: ubuntu-latest

    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    environment: Production Environment    #creating seperate Production Environment in GitHub

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Ansible
        run: |
          pip install ansible

      - name: Save SSH private key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ env.HOST }}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Create Ansible inventory
        run: |
          echo "[servers]" > inventory.ini
          echo "${{ env.HOST }} ansible_user=${{ env.USERNAME }} ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

      - name: Write Ansible playbook
        run: |
          echo "- name: Deploy to Production
                hosts: servers
                tasks:
                  - name: Pull Redis image
                    command: docker pull ${{ env.IMAGE_NAME_DB }}:${{ env.TAG }}
                  - name: Run Redis container
                    command: docker run --rm -d --name redis -p 6379:6379 ${{ env.IMAGE_NAME_DB }}:${{ env.TAG }}
                  - name: Pull Web App image
                    command: docker pull ${{ env.IMAGE_NAME_APP }}:${{ env.TAG }}
                  - name: Run Web App container
                    command: docker run --rm -d --name web_app -p 8080:8080 ${{ env.IMAGE_NAME_APP }}:${{ env.TAG }}"
          > playbook.yml

      - name: Run Ansible playbook
        run: ansible-playbook -i inventory.ini playbook.yml
